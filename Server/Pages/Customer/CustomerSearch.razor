@page "/customerSearch"

<PageTitle>Customer Search</PageTitle>





@if (IsLoading == true)
{
    <div style="width: 300px; display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgress></FluentProgress>
    </div>
}
@if (customers != null)
{
    <FluentHeader Style="background-color:none">
        <h3>Customer List</h3>
        <FluentSpacer />
        <FluentButton OnClick="@(() => New())" Appearance="Appearance.Accent">New</FluentButton>
    </FluentHeader>
   
    <Server.Component.Search OnFilter="Search" />

    <FluentDataGrid Items="@customers" ResizableColumns=true GridTemplateColumns="0.1fr 0.2fr 0.2fr 0.2fr 0.2fr 0.2fr"
                    style="height: 580px;overflow:auto;">

        <PropertyColumn Property="@(c => c.Id)" Title="Id" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.FirstName)" Title="First Name" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.LastName)" Title="Last Name" Align="Align.Start" Sortable="true" />
        <PropertyColumn Property="@(c => c.Phone)" Title="Phone" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.City)" Title="City" Align="Align.Start" />
        <PropertyColumn Property="@(c => c.Country)" Title="Country" Align="Align.Start" />

        <TemplateColumn Title="Actions">
            <FluentButton IconStart="@(new Icons.Regular.Size20.Edit())" BackgroundColor="var(--highlight-bg)" Color="var(--error)" Appearance="Appearance.Filled" Title="Edit" OnClick="@(() => Edit(context.Id))" />
            <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" Appearance="Appearance.Filled" BackgroundColor="#ff531a" Color="var(--danger)" Title="Hapus" OnClick="@(() => Delete(context.Id))" />
        </TemplateColumn>

    </FluentDataGrid>
}
@code {
    private bool IsLoading { get; set; } = false;
    IQueryable<CustomerDto>? customers;
    IQueryable<CustomerDto>? customersInit;
    bool? canceled;


    private void Search(string filter)
    {
        customers = customersInit.Where(p => p.FirstName.ToLower().Contains(filter.ToLower()) || p.LastName.ToLower().Contains(filter.ToLower()));
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();


        await Loading();


    }
    private void New()
    {
        _navman.NavigateTo("/CustomerCreate");
    }
    private async void Edit(int Id)
    {
        _navman.NavigateTo($"CustomerUpdate/{Id}");
    }
    private async Task Loading()
    {
        IsLoading = true;
        customersInit = (await _customerServicesMapper.GetAllAsync()).AsQueryable();
        customers = customersInit;

        IsLoading = false;
    }
    private async void Delete(int Id)
    {
        try
        {
            var dialog = await _dialogService.ShowConfirmationAsync("Are you sure you want to Delete?", "Ok", "No", "Delete Data");
            var dlgresult = await dialog.Result;

            canceled = dlgresult.Cancelled;

            if (canceled == null || (canceled == true))
            {
                _dialogService.ShowInfo("Delete cancelled", "Delete");
                return;
            }

            IsLoading = true;

            bool flg = await _customerServicesMapper.DeleteByIdAsync(Id);

            IsLoading = false;

            if (flg == true)
            {
                _dialogService.ShowInfo("Data dihapus", "Delete");
            }
            else
            {
                _dialogService.ShowWarning("Data tidak bisa dihapus", "Delete");
            }

            await Loading();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            IsLoading = false;
            return;
        }

    }
}
